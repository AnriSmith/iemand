e <- rnorm(N, mean = 0, sd = 1)
y <- 0.8*x + e
data <- cbind(x,y)
return(data)
}
simulated.data <- simulate(30)
#------------ Hypothesis 1------------
h1 <- function(x, y, n)
{
fit <- lm(y ~ 0 + x, offset = rep(0.5, n))
y.fit <- 0.5 + fit$coefficients[1]*x
data <- cbind(x, y.fit)
return(list(data, fit$coefficients))
}
fit1 <- h1(simulated.data[,1], simulated.data[,2], 30)[[1]]
#------------ Hypothesis 2------------
h2 <- function(x, y, n)
{
fit <- lm(y ~ 0 + x, offset = rep(-0.5, n))
y.fit <- -0.5 + fit$coefficients[1]*x
data <- cbind(x, y.fit)
return(list(data, fit$coefficients))
}
fit2 <- h2(simulated.data[,1], simulated.data[,2], 30)[[1]]
#------------ Target ------------
target <- function(x)
{
y <- 0.8*x
data <- cbind(x, y)
return(data)
}
target.fit <- target(simulated.data[,1])
#------------ plotting above------------
plot(simulated.data, type = "p", main = expression("Exploring the fit of respective hypotheses"), col = "black", pch = 16)
lines(fit1, col = "green")
lines(fit2, col = "blue")
lines(target.fit, col = "red")
legend(0.7, -1, legend = c(expression(g[1](x)),
expression(g[2](x)),
expression(f(x))),
fill = c("green", "blue", "red"), border = FALSE, bty = "n")
comp.fitness <- function(validate, coefs) #data = validation set, coefs = x.coefs of g1 & g2
{
fit.h1 <- 0.5 + coefs[1]*validate[,1]
fit.h2 <- -0.5 + coefs[2]*validate[,1]
error.1 <- sum((validate[,2] - fit.h1)^2)
error.2 <- sum((validate[,2] - fit.h2)^2)
return(c(error.1, error.2))
}
rep.simulations <- function(N, rep) #N= 30, rep =10 000
{
E.out.g <- matrix(0, nrow = rep, ncol = 21) # columns represent diff. validation set sizes
E.val.g <- matrix(0, nrow = rep, ncol = 21)
for(i in 1:rep)
{
data <- simulate(N)
for(j in 5:25)
{
train <- data[sample(nrow(data), N-j, replace = FALSE), ]
train <- as.data.frame(train)
validate <- data[-as.integer(row.names(train)),]
fit1 <- h1(train[,1], train[,2], N-j)[[2]]
fit2 <- h2(train[,1], train[,2], N-j)[[2]]
coefs <- c(fit1, fit2)
#Comparing fitness of two hypotheses on the validation set
rel.fitness <- comp.fitness(validate, coefs) # returns respective errors
#Better fit
g <- which.is.max(rel.fitness) #what if they are both -Inf?
intecepts <- c(0.5, -0.5)
E.val.g[i,j-4] <- rel.fitness[g]
#Testing g* on out of sample data.
test.set <- simulate(N)
test.g <- intecepts[g] + coefs[g]*test.set[,1]
curr.E.out.g <- sum((test.set[,2] - test.g)^2)
E.out.g[i,j-4] <- curr.E.out.g
}
}
return(list(E.val.g, E.out.g))
}
#simulations <- rep.simulations(30, 10000)
#save(simulations, file = "simulations.RData")
load("simulations.RData")
avg.E.val <- apply(simulations[[1]], 2, sum)/10000
avg.E.test <- apply(simulations[[2]], 2, sum)/10000
j <- 5:25
plot(j, avg.E.val, type = "l", col = "red", main = expression("Behaviour of validation and out-of-sample error"), ylab = "Error", xlab = "Size of Validation Set", lwd = 2)
lines(j,avg.E.test, type= "l", col = "dark green", lwd = 2)
legend(21, 15, legend = c(expression(E[out]("g*")),expression(E[val]("g*"))), fill = c("dark green", "red"), border = FALSE)
simulate2 <- function(N)
{
x <- runif(N, -1, 1)
e <- rnorm(N, mean = 0, sd = 1)
y <- sin(pi*x) + e
data <- cbind(x,y)
return(data)
}
set.seed(50)
simulated.data2 <- simulate2(50)
x <- seq(-1,1, 0.01)
plot(simulated.data2, type = "p", main = expression("Simulated data & target model"), col = "black", pch = 16)
lines(x, sin(pi*x), col= "red")
legendre <- function(q, x)
{
summation <- rep(0, length(x))
for(k in 0:q){
summation <- summation + ((x^k)*choose(q,k)*choose((q+k-1)/2,q))
}
L <- 2^(q)*summation
return(L)
}
#Regularized estimate for legendre polynomial - simplifies to unregularised if lambda = 0
reg.est <- function(sim.data, Q, lambda)
{
# Y = ZW + e
x <- sim.data[,1]
y <- sim.data[,2]
Z <- matrix(0, nrow = length(x), ncol = Q + 1)
Z[,1] <- 1
for(i in 1:Q)
{
Z[,i+1] <- sapply(x,legendre, q = i) #make sure sapply is doing the right thing..
}
w <- solve((t(Z)%*%Z)+(lambda*diag(Q+1)))%*%(t(Z)%*%y) # adding of the lambda is the "regularization"
return(list(w,Z)) #returns estimate for weights
}
est0 <- reg.est(simulated.data2, 10, 0)[[1]]
est5 <- reg.est(simulated.data2, 10, 5)[[1]]
fit <- function(data, est)
{
Q <- length(est) - 1
x <- data[,1]
y <- data[,2]
w <- est
# Z calc: NOTE recalculate Z since could fit given weights to another data set.
Z <- matrix(0, nrow = length(x), ncol = Q+1)
Z[,1] <- 1
for(i in 1:Q)
{
Z[,i+1] <- sapply(x,legendre, q = i)
}
y.fit <- Z%*%w
data <- as.data.frame(cbind(x, y.fit))
colnames(data) <- c("x", "y.fit")
data <- arrange(data, x)
return(data)
}
fit0 <- fit(simulated.data2, est0)
fit5 <- fit(simulated.data2, est5)
x <- seq(-1, 1, by = 0.01)
plot(simulated.data2, type = "p", main = expression("Target & regularised legendre models"), col = "black", pch = 16)
lines(x, sin(pi*x), col= "red", lwd = 1.5)
lines(fit0, col = "blue", lwd = 1.5)
lines(fit5, col = "dark green", lwd = 1.5)
legend(0.6, -1.5, legend = c(expression(f(x)), expression(h[lambda = 0](x)), expression(h[lambda = 5](x))), fill = c("red", "blue", "dark green"), border = FALSE)
lambdas <- seq(0.1, 10, by = 0.1)
tenfold.validation <- function(sim.data, lambdas, Q)
{
N <- nrow(sim.data)
crossfold.errors <- matrix(0, nrow = N, ncol = length(lambdas))
steps <- N/10 #divide data into 10-folds
for(i in 1:10)
{
validate <- sim.data[((steps*i-4):(steps*i)),]
validate <- as.data.frame(validate)
train <- sim.data[-as.integer(row.names(validate)),]
# fitting Legendre polynomials to training data for each value of lambda
for(j in 1:length(lambdas))
{
curr.lambda <- lambdas[j]
curr.est <- reg.est(sim.data = train, Q = Q, lambda = curr.lambda) # weights est. on training data.
validate.fit <- fit(validate, curr.est[[1]])
curr.error <- (validate.fit[,2] - validate[,2])^2
crossfold.errors[((steps*i-4):(steps*i)), j] <- curr.error
}
}
return(crossfold.errors)
}
#validation <- tenfold.validation(sim.data = simulated.data2, lambdas = lambdas, Q = 10)
#save(validation, file = "cross-validation.RData")
load("cross-validation.RData")
avg.error <- apply(validation, 2, sum)/50
plot(lambdas, avg.error, main = expression("Average CV-Error associated with each value of "*lambda), xlab = expression(lambda), ylab = "error", type = "l", lwd = 1.5)
#Choosing best fitting model.
final.est <- reg.est(sim.data = simulated.data2, Q = 10, lambda = 10)
final.fit <- fit(simulated.data2, final.est[[1]])
x <- seq(-1, 1, by = 0.01)
plot(simulated.data2, type = "p", main = expression("Target & best fitting model"), col = "black", pch = 16)
lines(x, sin(pi*x), col= "red", lwd = 1.5)
lines(final.fit, col = "blue", lwd = 1.5)
legend(0.55, -2, legend = c(expression(f(x)), expression(g[lambda = 10](x))), fill = c("red", "blue"), border = FALSE)
#---------------reading in all the images---------------
#Observations: pixels
#Covariates: image
#setwd("~/Documents/Analytics Master's/Machine Learning/Assignments")
#---------- Reading in the images
num <- as.character(1:400)
pgm <- "pgm"
image.list <- c()
for(i in 1:length(num)){
image.list[i] <- paste(num[i], pgm, sep = ".")
}
# file paths and reading in images
f <- file.path("Faces", image.list)
image.input <- lapply(f, read.pnm, cellres = c(1,1))
image.matrix <- matrix(0, nrow = 10304, ncol = 400)
for(i in 1:400)
{
curr.image <- image.input[[i]]
curr.image <- as.vector(curr.image@grey)
image.matrix[,i] <- curr.image
}
image.matrix2 <- t(image.matrix)
#--------------- the mean image -----------------
avg.pixel.values <- apply(image.matrix,1,sum)/400
avg.pixel.values.rev <- rev(avg.pixel.values)
avg.pixels <- matrix(avg.pixel.values.rev, nrow = 112) #need to rotate entries by 180 degrees
width <- 1:92
length <- 1:112
mean.image <- image(width, length, t(avg.pixels), col = grey.colors(10), main = expression("Image plot of average face"), xlab = "", ylab = "")
sd.pixel.values <- apply(image.matrix,1,sd)/400
sd.pixel.values.rev <- rev(sd.pixel.values)
sd.pixels <- matrix(sd.pixel.values.rev, nrow = 112)
sd.image <- image(width, length, t(sd.pixels), col = grey.colors(10), main = expression("Image plot of standard deviation of faces"), xlab = "", ylab = "")
x168 <- read.pnm(file = "Faces/168.pgm", cellres = c(1,1))
#print(x168)
greyscale.data <- as.vector(x168@grey)
greyscale.data.rev <- rev(greyscale.data)
greyscale.data <- matrix(greyscale.data.rev, nrow = 112)
standardised.data <- (greyscale.data - avg.pixels)/sd.pixels
original <- image(width, length, t(greyscale.data) , col = grey.colors(10), main = expression("Original 168 image"), xlab = "", ylab = "")
standardised <- image(width, length, t(standardised.data), col = grey.colors(10), main = expression("Standardised 168 image"), xlab = "", ylab = "")
X <- image.matrix2
#X:400 X 10304
#centering and scaling the data
scaled.X <- scale(X, scale = T )
X.star <- 1/sqrt(400)*(scaled.X)
svd <- svd(X.star)
Eigenvalues <- svd$d^2
Eigenvectors <- t(svd$v)
#orthonormal basis
phi <- Eigenvectors[1:10,] # each column = dim
eigenImages <- function(phi, headings)
{
par(mfrow = c(2,5))
for(i in 1:10)
{
grey.scale.data <- rev(phi[i,])
grey.scale.data <- matrix(grey.scale.data, nrow = 112)
image <- image(width, length, t(grey.scale.data) , col = grey.colors(10), main = headings[i], xlab = "", ylab = "")
}
}
eigenfaces <- eigenImages(phi, 1:10)
mtext("Plots of the first 10 eigenfaces", side = 3, line = -17, outer = TRUE)
x115 <- read.pnm(file = "Faces/115.pgm", cellres = c(1,1))
#print(x115)
greyscale.data <- as.vector(x115@grey)
greyscale.data.rev <- rev(greyscale.data)
greyscale.data.matrix <- matrix(greyscale.data.rev, nrow = 112)
standardised.data <- (greyscale.data.matrix - avg.pixels)/sd.pixels
par(mfrow = c(1,1))
standardised <- image(width, length, t(standardised.data), col = grey.colors(10), main = "Standardised 115 image", xlab = "", ylab = "")
# Image reconstruction
headings = c("Reconstruction using 5 eigenfaces", "Reconstruction using 50 eigenfaces", "Reconstruction using 200 eigenfaces")
reconstruction = function(phi, heading)
{
b <- phi%*%greyscale.data
b <- t(b)
x.hat <- b%*%phi
x.hat.matrix <- matrix(rev(x.hat), nrow = 112)
reconstr <- image(width, length, t(x.hat.matrix), col = grey.colors(10), main = heading, xlab = "", ylab = "")
return(reconstr)
}
reconstruction5 <- reconstruction(Eigenvectors[1:5,], heading = headings[1])
reconstruction50 <- reconstruction(Eigenvectors[1:50,], heading = headings[2])
reconstruction200 <- reconstruction(Eigenvectors[1:200,], heading = headings[3])
library(dplyr)
library(rvest)
library(tidyverse)
library(stringr)
page <- read_html("https://en.wikipedia.org/wiki/List_of_municipalities_in_South_Africa")
page
data <- page %>% html_nodes(css = ".jquery-tablesorter") %>%
html_text(trim = TRUE)
data
data <- page %>% html_nodes(css = ".jquery-tablesorter")
data
mun_elements <- html_nodes(x = page, css = "table")
mun_elements <- html_nodes(x = page, css = "table")
mun_elements
table <- html_table(mun_elements[[1]])
print(table)
table <- html_table(mun_elements[[2]])
print(table)
table <- table[,1:3]
print(table)
table2 <- html_table(mun_elements[[3]])
table2 <- table2[,1:3]
print(table2)
table3 <- html_table(mun_elements[[3]])
table3 <- table2[,1:3]
print(table3)
write.csv(table, table2, table3, file = "mun_prov.csv")
write.csv(table, file = "mun_prov.csv")
write.csv(table2, file = "mun_prov2.csv")
write.csv(table3, file = "mun_prov3.csv")
table <- html_table(mun_elements[[2]])
table <- table[,1:3]
print(table)
table2 <- html_table(mun_elements[[3]])
table2 <- table2[,1:3]
print(table2)
table3 <- html_table(mun_elements[[4]])
table3 <- table2[,1:3]
print(table3)
page <- read_html("https://en.wikipedia.org/wiki/List_of_municipalities_in_South_Africa")
mun_elements <- html_nodes(x = page, css = "table")
table <- html_table(mun_elements[[2]])
table <- table[,1:3]
print(table)
table2 <- html_table(mun_elements[[3]])
table2 <- table2[,1:3]
print(table2)
table3 <- html_table(mun_elements[[4]])
table3 <- table2[,1:3]
print(table3)
table3 <- table3[,1:3]
print(table3)
table3 <- html_table(mun_elements[[4]])
table3 <- table3[,1:3]
print(table3)
write.csv(table, file = "mun_prov.csv")
write.csv(table2, file = "mun_prov2.csv")
write.csv(table3, file = "mun_prov3.csv")
library(rvest)
library(tidyverse)
library(stringr)
page <- read_html("https://en.wikipedia.org/wiki/List_of_municipalities_in_South_Africa")
mun_elements <- html_nodes(x = page, css = "table")
table <- html_table(mun_elements[[2]])
table <- table[,1:3]
table2 <- html_table(mun_elements[[3]])
table2 <- table2[,1:3]
table3 <- html_table(mun_elements[[4]])
table3 <- table3[,1:3]
write.csv(table, file = "mun_prov.csv")
write.csv(table2, file = "mun_prov2.csv")
write.csv(table3, file = "mun_prov3.csv")
library(rvest)
library(tidyverse)
library(stringr)
page <- read_html("https://en.wikipedia.org/wiki/List_of_municipalities_in_South_Africa")
mun_elements <- html_nodes(x = page, css = "table")
table <- html_table(mun_elements[[2]])
table <- table[,1:3]
print(table)
table2 <- html_table(mun_elements[[3]])
table2 <- table2[,1:3]
print(table2)
table3 <- html_table(mun_elements[[4]])
table3 <- table3[,1:3]
print(table3)
table4 <- html_table(mun_elements[[5]])
table4 <- table4[,1:3]
print(table4)
write.csv(table4, file = "mun_prov4.csv")
library(tree)
library(gbm)
library(tree)
library(rpart)
library(randomForest)
library(e1071)
library(tidyverse)
library(quadprog)
install.packages("devtools")
install.packages("usethis")
install.packages("testthat")
install.packages("covr")
install.packages("lintr")
install.packages("readr")
install.packages("praise")
install.packages("magrittr")
install.packages("roxygen2")
library(usethis)
edit_r_profile()
create_package("iemand")
library(usethis)
create_package("iemand")
library(roxygen2)
library(devtools)
load_all()
load_all()
library(usethis)
edit_r_profile()
if (interactive()){
suppressMessages(require(devtools))
suppressMessages(require(usethis))
}
library(iemand)
load_all()
?create_age
load_all()
#' @details Useless function
#' @return returns age
#' @export
#' @examples
create_age <- function(){
age <- sample(1:100, size = 1)
return(age)
}
load_all()
?create_age
document()
document()
?create_age
library(iemand)
use_git_config(user.name = "AnriS", user.email = "smtanr001@myuct.ac.za")
use_git()
use_git()
getwd()
use_git()
use_git()
getwd()
use_git()
use_git_config(user.name = "AnriSmith", user.email = "anri7smith7@gmail.com")
use_git()
use_git_config(user.name = "AnriS", user.email = "smtanr001@myuct.ac.za")
use_git()
getwd()
use_git()
setwd("~/Desktop/iemand")
use_git()
use_package_doc()
document()
use_testthat()
use_test("create_age")
library(devtools)
use_r("praise_nicely")
use_package(package = "praise")
document()
use_package("magrittr")
load_all()
praise_nicely("everyone")
load_all()
document()
load_all()
document()
?praise_nicely
?praise_nicely
load_all()
?praise_nicely
load_all()
?praise_nicely
load_all()
?praise_nicely
load_all()
?praise_nicely
load_all()
?praise_nicely
load_all()
?praise_nicely
library(iemand)
load_all()
?praise_nicely
library(iemand)
?praise_nicely
document()
?praise_nicely
praise_nicely("everyone")
girls_names <- readr::read_csv("data-raw/girls_names.csv")
girls_names$sex <- "female"
boys_names <- readr::read_csv("data-raw/boys_names.csv")
boys_names$sex <- "male"
sa_names <- rbind(girls_names, boys_names)
names(sa_names) <- c("first_name", "number", "sex")
usethis::use_data(sa_names, overwrite = TRUE)
library(readr)
girls_names <- readr::read_csv("data-raw/girls_names.csv")
girls_names$sex <- "female"
boys_names <- readr::read_csv("data-raw/boys_names.csv")
boys_names$sex <- "male"
sa_names <- rbind(girls_names, boys_names)
names(sa_names) <- c("first_name", "number", "sex")
usethis::use_data(sa_names, overwrite = TRUE)
load("~/Desktop/iemand/data/sa_names.rda")
library(iemand)
sa_names
sa_names
document()
load_all
load_all()
sa_names
head(sa_names)
document()
?sa_names
document()
?sa_names
document()
?sa_names
document()
?sa_names
head(sa_names)
use_r("give_name")
document()
load_all()
document()
devtools::check()
load_all()
?give_name
use_mit_license(name = "Anri Smith")
devtools::check()
?use_data
use_travis()
